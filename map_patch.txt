 <!DOCTYPE html>
<html lang="ja">
<head>
    <meta charset="UTF-8">
    <title>【地図生成】3D運転リハビリテーション・シミュレーター</title>
    <style>
        body { margin: 0; background-color: #000; color: #fff; overflow: hidden; }
        canvas { display: block; }
        #info {
            position: absolute; top: 10px; width: 100%;
            text-align: center; z-index: 100;
            font-family: 'Helvetica Neue', 'Arial', 'Hiragino Kaku Gothic ProN', 'Hiragino Sans', 'Meiryo', sans-serif;
            font-size: 24px; font-weight: 300;
            text-shadow: 0 0 8px #000;
        }
        #loader {
            position: absolute; top: 50%; left: 50%;
            transform: translate(-50%, -50%);
            font-size: 20px; font-family: sans-serif;
        }
    </style>
</head>
<body>
    <div id="info">
        地図ベース3D運転シミュレーター<br>
        <span style="font-size: 16px;">(サンプル市街地)</span>
    </div>
    <div id="loader">プログラムを準備中...</div>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/three.js/r128/three.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/cannon.js/0.6.2/cannon.min.js"></script>
    
    <script>
        document.addEventListener('DOMContentLoaded', () => {
            const loaderElement = document.getElementById('loader');

            if (typeof THREE === 'undefined' || typeof CANNON === 'undefined') {
                loaderElement.innerHTML = '致命的エラー: 基幹ライブラリが読み込めません。';
                loaderElement.style.color = 'red';
                return;
            }

            const loaderUrls = [ 'https://unpkg.com/three@0.128.0/examples/js/loaders/RGBELoader.js' ];

            function loadScript(url) {
                return new Promise((resolve, reject) => {
                    const script = document.createElement('script');
                    script.src = url;
                    script.onload = resolve;
                    script.onerror = () => reject(new Error(`スクリプトの読み込みに失敗: ${url.split('/').pop()}`));
                    document.head.appendChild(script);
                });
            }

            Promise.all(loaderUrls.map(loadScript))
                .then(() => {
                    if (typeof THREE.RGBELoader === 'undefined') {
                        throw new Error('追加コンポーネントの初期化に失敗しました。');
                    }
                    loaderElement.innerHTML = 'シミュレーターを起動中...';
                    runSimulator();
                })
                .catch(error => {
                    console.error("起動エラー:", error);
                    loaderElement.innerHTML = `致命的なエラー: ${error.message}`;
                    loaderElement.style.color = 'red';
                });
            
            function runSimulator() {
                let camera, scene, renderer, world, vehicle;
                const carModel = new THREE.Group();
                const wheelMeshes = [];

                init();
                animate();

                function init() {
                    world = new CANNON.World({ gravity: new CANNON.Vec3(0, -9.82, 0) });
                    world.broadphase = new CANNON.SAPBroadphase(world);
                    world.solver.iterations = 10;
                    
                    const groundMaterial = new CANNON.Material("ground");
                    const wheelMaterial = new CANNON.Material("wheel");
                    const buildingMaterial = new CANNON.Material("building");

                    world.addContactMaterial(new CANNON.ContactMaterial(wheelMaterial, groundMaterial, {
                        friction: 0.3, restitution: 0, contactEquationStiffness: 1000,
                    }));
                     world.addContactMaterial(new CANNON.ContactMaterial(buildingMaterial, wheelMaterial, {
                        friction: 0.0, restitution: 0.5
                    }));
                    world.addContactMaterial(new CANNON.ContactMaterial(buildingMaterial, groundMaterial, {
                        friction: 0.9, restitution: 0.1
                    }));


                    camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);
                    camera.position.set(4, 2, 10);
                    scene = new THREE.Scene();

                    new THREE.RGBELoader()
                        .load('https://raw.githubusercontent.com/mrdoob/three.js/dev/examples/textures/equirectangular/venice_sunset_1k.hdr', (texture) => {
                            texture.mapping = THREE.EquirectangularReflectionMapping;
                            scene.background = texture;
                            scene.environment = texture;
                            loaderElement.style.display = 'none';
                        }, undefined, () => {
                             scene.background = new THREE.Color(0x87ceeb);
                             loaderElement.style.display = 'none';
                        });

                    const mapData = {
                        roads: [
                            { x: 0, z: 0, width: 12, depth: 200 },
                            { x: 0, z: 0, width: 200, depth: 12 }
                        ],
                        buildings: [
                            { x: 25, z: 25, w: 20, h: 30, d: 20 },
                            { x: -25, z: 25, w: 20, h: 25, d: 20 },
                            { x: 25, z: -25, w: 20, h: 20, d: 20 },
                            { x: -25, z: -25, w: 20, h: 35, d: 20 }
                        ]
                    };
                    
                    generateMap(mapData, groundMaterial, buildingMaterial);

                    const chassisBody = new CANNON.Body({ mass: 150, shape: new CANNON.Box(new CANNON.Vec3(1, 0.3, 2)) });
                    chassisBody.position.set(0, 1, 5);
                    vehicle = new CANNON.RaycastVehicle({ chassisBody: chassisBody });

                    const wheelOptions = {
                        radius: 0.35, directionLocal: new CANNON.Vec3(0, -1, 0), suspensionStiffness: 30,
                        suspensionRestLength: 0.3, frictionSlip: 5, maxSuspensionTravel: 0.3, material: wheelMaterial
                    };
                    const wheelPositions = [
                        new CANNON.Vec3(-1, 0, 1.7), new CANNON.Vec3(1, 0, 1.7),
                        new CANNON.Vec3(-1, 0, -1.7), new CANNON.Vec3(1, 0, -1.7)
                    ];
                    wheelPositions.forEach(pos => vehicle.addWheel({ ...wheelOptions, chassisConnectionPointLocal: pos }));
                    vehicle.addToWorld(world);

                    const chassisMesh = new THREE.Mesh(new THREE.BoxGeometry(2, 0.6, 4), new THREE.MeshStandardMaterial({ color: 0xcc0000, metalness: 0.9, roughness: 0.2 }));
                    carModel.add(chassisMesh);
                    const cabinMesh = new THREE.Mesh(new THREE.BoxGeometry(1.6, 0.8, 2), new THREE.MeshStandardMaterial({ color: 0x333333, metalness: 0.9, roughness: 0.2 }));
                    cabinMesh.position.set(0, 0.7, -0.5);
                    carModel.add(cabinMesh);
                    scene.add(carModel);

                    const wheelGeo = new THREE.CylinderGeometry(wheelOptions.radius, wheelOptions.radius, 0.3, 26);
                    const wheelMat = new THREE.MeshStandardMaterial({ color: 0x222222, metalness: 0.5, roughness: 0.5 });
                    vehicle.wheelInfos.forEach(() => {
                        const wheelMesh = new THREE.Mesh(wheelGeo, wheelMat);
                        wheelMeshes.push(wheelMesh);
                        scene.add(wheelMesh);
                    });
                    
                    renderer = new THREE.WebGLRenderer({ antialias: true });
                    renderer.setPixelRatio(window.devicePixelRatio);
                    renderer.setSize(window.innerWidth, window.innerHeight);
                    document.body.appendChild(renderer.domElement);
                    
                    setupEventListeners();
                }

                function generateMap(data, groundMat, buildingMat) {
                    const roadMaterial = new THREE.MeshStandardMaterial({ color: 0x444444, metalness: 0.5, roughness: 0.6 });
                    data.roads.forEach(r => {
                        const roadMesh = new THREE.Mesh(new THREE.PlaneGeometry(r.width, r.depth), roadMaterial);
                        roadMesh.rotation.x = -Math.PI / 2;
                        roadMesh.position.set(r.x, 0.01, r.z); // a bit higher to prevent z-fighting
                        scene.add(roadMesh);
                    });
                    const groundBody = new CANNON.Body({ mass: 0, material: groundMat, shape: new CANNON.Plane() });
                    groundBody.quaternion.setFromAxisAngle(new CANNON.Vec3(1, 0, 0), -Math.PI / 2);
                    world.addBody(groundBody);

                    const buildingMeshMaterial = new THREE.MeshStandardMaterial({ color: 0x888888, metalness: 0.6, roughness: 0.4 });
                    data.buildings.forEach(b => {
                        const halfExtents = new CANNON.Vec3(b.w / 2, b.h / 2, b.d / 2);
                        const boxGeo = new THREE.BoxGeometry(b.w, b.h, d);
                        const boxMesh = new THREE.Mesh(boxGeo, buildingMeshMaterial);
                        boxMesh.position.set(b.x, b.h / 2, b.z);
                        scene.add(boxMesh);
                        
                        const boxBody = new CANNON.Body({ mass: 0, material: buildingMat, shape: new CANNON.Box(halfExtents) });
                        boxBody.position.set(b.x, b.h / 2, b.z);
                        world.addBody(boxBody);
                    });
                }
                
                function setupEventListeners() {
                    const maxSteerVal = 0.5, maxForce = 800;

                    document.addEventListener('keydown', (e) => {
                        switch(e.key) {
                            case 'w': case 'ArrowUp': vehicle.applyEngineForce(-maxForce, 2); vehicle.applyEngineForce(-maxForce, 3); break;
                            case 's': case 'ArrowDown': vehicle.applyEngineForce(maxForce, 2); vehicle.applyEngineForce(maxForce, 3); break;
                            case 'a': case 'ArrowLeft': vehicle.setSteeringValue(maxSteerVal, 0); vehicle.setSteeringValue(maxSteerVal, 1); break;
                            case 'd': case 'ArrowRight': vehicle.setSteeringValue(-maxSteerVal, 0); vehicle.setSteeringValue(-maxSteerVal, 1); break;
                        }
                    });

                    document.addEventListener('keyup', (e) => {
                         switch(e.key) {
                            case 'w': case 'ArrowUp': case 's': case 'ArrowDown': vehicle.applyEngineForce(0, 2); vehicle.applyEngineForce(0, 3); break;
                            case 'a': case 'ArrowLeft': case 'd': case 'ArrowRight': vehicle.setSteeringValue(0, 0); vehicle.setSteeringValue(0, 1); break;
                        }
                    });

                    window.addEventListener('resize', onWindowResize);
                }

                function onWindowResize() {
                    camera.aspect = window.innerWidth / window.innerHeight;
                    camera.updateProjectionMatrix();
                    renderer.setSize(window.innerWidth, window.innerHeight);
                }

                function animate() {
                    requestAnimationFrame(animate);
                    world.step(1 / 60);

                    carModel.position.copy(vehicle.chassisBody.position);
                    carModel.quaternion.copy(vehicle.chassisBody.quaternion);
                    
                    vehicle.wheelInfos.forEach((wheel, i) => {
                        vehicle.updateWheelTransform(i);
                        const t = wheel.worldTransform;
                        wheelMeshes[i].position.copy(t.position);
                        wheelMeshes[i].quaternion.copy(t.quaternion);
                    });

                    const cameraOffset = carModel.localToWorld(new THREE.Vector3(0, 4, 9));
                    camera.position.lerp(cameraOffset, 0.1);
                    camera.lookAt(carModel.position);
                    
                    renderer.render(scene, camera);
                }
            }
        });
    </script>
</body>
</html>